{"version":3,"sources":["actions/types.js","reducers/rootReducer.js","Components/Header.js","utilities/config/utilFunctions.js","actions/index.js","utilities/config/constants.js","Components/IndexPage.js","utilities/awsFunctions.js","Components/Register.js","Components/Login.js","Components/Logout.js","App.js","serviceWorker.js","index.js","utilities/config/dev.js"],"names":["AUTH_USER","UNAUTH_USER","rootReducer","arguments","length","undefined","action","type","isAuthenticated","user","payload","localStorage","getItem","Header","this","props","react_default","a","createElement","className","react_router_dom","activeClassName","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","checkAuth","Component","connect","reduxState","decodeJWT","_x","_decodeJWT","apply","_callee","token","regenerator_default","wrap","_context","prev","next","abrupt","jwt","verify","secret","sent","stop","logout","removeItem","CONSTANTS","serverURL","awsBucketURL","IndexPage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","users","_this2","socket","on","res","newUsers","filter","email","setState","event","target","style","color","emit","getAttribute","picture","loginExistingToken","history","push","_this3","map","u","key","_id","margin","src","alt","onClick","likePicture","bind","data","defineProperty","superLikePicture","blockUser","socketUserBlockListen","axios","get","concat","constants","result","createCards","AWS","require","uuid","keys","s3","S3","signatureVersion","region","accessKeyId","secretAccessKey","awsFuncs","getUploadConfig","_getUploadConfig","asyncToGenerator","mark","url","getSignedUrl","Bucket","ContentType","Key","Register","password","uploadConfig","put","headers","Content-Type","picURL","obj","post","preventDefault","document","querySelector","innerHTML","postData","auth","register","display","justifyContent","textAlign","onSubmit","htmlFor","name","aria-describedby","placeholder","value","onChange","objectSpread","required","pattern","title","files","accept","t","_ref","dispatch","setItem","Login","login","_ref2","_callee2","_context2","_x2","Logout","socketIOClient","newElement","message","body","append","addEventListener","remove","console","log","App","Components_Header","react_router","path","exact","render","rest","Components_IndexPage","assign","component","from","Boolean","window","location","hostname","match","storeWithMiddleware","applyMiddleware","reduxThunk","createStore","ReactDOM","es","store","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","process","ACCESSKEY","SACCESSKEY","JWTSECRET","module","exports"],"mappings":"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","file":"static/js/main.2d11de0d.chunk.js","sourcesContent":["export const AUTH_USER = 'auth_user';\r\nexport const UNAUTH_USER = 'unauth_user';\r\n","import { AUTH_USER, UNAUTH_USER } from '../actions/types';\r\n\r\nconst rootReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case(AUTH_USER):\r\n            return {isAuthenticated: true, user: action.payload};\r\n        case (UNAUTH_USER):\r\n            return {isAuthenticated: false, user: action.payload};\r\n        default:\r\n            return {isAuthenticated: localStorage.getItem('token') !== null, user: null};\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Header extends Component {\r\n\r\n\r\n\r\n    checkAuth() {\r\n        if(this.props.isAuthenticated) {\r\n            return (\r\n                <div className=\"navbar-nav\">\r\n                    <NavLink activeClassName=\"active\" className=\"nav-item nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></NavLink>\r\n                    <NavLink to='/logout' className=\"nav-item nav-link\">Logout</NavLink>\r\n                </div>\r\n            );\r\n        }else {\r\n            return(\r\n                <div className=\"navbar-nav\">\r\n                    <NavLink activeClassName=\"active\" className=\"nav-item nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></NavLink>\r\n                    <NavLink activeClassName=\"active\" className=\"nav-item nav-link\" to=\"/login\">Login</NavLink>\r\n                    <NavLink activeClassName=\"active\" className=\"nav-item nav-link\" to=\"/register\">Register</NavLink>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <NavLink className=\"navbar-brand\" to=\"/\">Dating App</NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    {this.checkAuth()}\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(reduxState) {\r\n    return reduxState;\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import jwt from \"jsonwebtoken\";\r\nimport {secret} from \"./dev\";\r\n\r\nexport async function decodeJWT(token) {\r\n    if(!localStorage.getItem('token')) {\r\n        return null;\r\n    }\r\n    return await jwt.verify(token, secret);\r\n}\r\n","import {AUTH_USER, UNAUTH_USER} from './types';\r\nimport { decodeJWT } from \"../utilities/config/utilFunctions\";\r\n\r\nexport function register(t) {\r\n    return async function (dispatch) {\r\n        localStorage.setItem('token', t);\r\n        const user = await decodeJWT(localStorage.getItem('token'));\r\n        const obj = {\r\n            type: AUTH_USER,\r\n            payload: user\r\n        };\r\n        dispatch(obj);\r\n    }\r\n}\r\n\r\nexport function login(t) {\r\n    return async function (dispatch) {\r\n        localStorage.setItem('token', t);\r\n        const user = await decodeJWT(localStorage.getItem('token'));\r\n        const obj = {\r\n            type: AUTH_USER,\r\n            payload: user\r\n        };\r\n        dispatch(obj);\r\n    }\r\n}\r\n\r\nexport function loginExistingToken(user) {\r\n    return {\r\n        type: AUTH_USER,\r\n        payload: user\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('token');\r\n    return {\r\n        type: UNAUTH_USER,\r\n        payload: null\r\n    }\r\n}\r\n","const CONSTANTS = {\r\n    serverURL: ' https://dating-app-server-as.herokuapp.com',\r\n    awsBucketURL: 'https://s3.ap-south-1.amazonaws.com/intern-images/'\r\n};\r\n\r\n export default CONSTANTS;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { connect } from \"react-redux\";\r\nimport { decodeJWT } from '../utilities/config/utilFunctions';\r\nimport { loginExistingToken, logout } from '../actions/index';\r\nimport constants from '../utilities/config/constants';\r\nimport './Header.css';\r\n\r\nclass IndexPage extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            users: []\r\n        };\r\n    }\r\n\r\n\r\n    socketUserBlockListen() {\r\n        this.props.socket.on('block', (res) => {\r\n            const newUsers = this.state.users.filter((user) => {\r\n                return user.email !== res.user.email;\r\n            });\r\n            this.setState({\r\n                users: newUsers\r\n            });\r\n        });\r\n    }\r\n\r\n    likePicture(event) {\r\n        event.target.style.color = '#58595b';\r\n        this.props.socket.emit('like', this.props.user.email, event.target.getAttribute('data'));\r\n    }\r\n\r\n    superLikePicture(event) {\r\n        event.target.style.color = '#58595b';\r\n        this.props.socket.emit('superlike', this.props.user.email, this.props.user.picture, event.target.getAttribute('data'));\r\n    }\r\n\r\n    blockUser(event) {\r\n        event.target.style.color = '#58595b';\r\n        this.props.socket.emit('block', this.props.user, event.target.getAttribute('data'));\r\n    }\r\n\r\n    async checkAuth() {\r\n        if(this.props.isAuthenticated && !this.props.user) {\r\n            const user = await decodeJWT(localStorage.getItem('token'));\r\n            if(!user) {\r\n                this.props.logout();\r\n            }else if(user) {\r\n                this.props.loginExistingToken(user);\r\n            }\r\n        }else if(!this.props.isAuthenticated) {\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n\r\n    createCards(users) {\r\n         return users.map((u) => {\r\n             if(u.email !== this.props.user.email){\r\n                 return(\r\n                         <div key={u._id} className=\"card col-md-3 col-sm-6\" style={{margin: '4%'}}>\r\n                             <img className=\"card-img-top cardImage\" src={u.picture} alt={u.id}/>\r\n                             <div className=\"card-body\">\r\n                                 <p className=\"card-text spreadIcons\">\r\n                                     <i className=\"fas fa-thumbs-up icons\" onClick={this.likePicture.bind(this)} data={u._id}/>\r\n                                     <i className=\"fas fa-heart icons\" data={u._id} onClick={this.superLikePicture.bind(this)} data={u._id}/>\r\n                                     <i className=\"fas fa-ban icons\" onClick={this.blockUser.bind(this)} data={u._id}/>\r\n                                 </p>\r\n                             </div>\r\n                         </div>\r\n                 )\r\n             }else {\r\n                 return null;\r\n             }\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.checkAuth();\r\n        if(this.props.isAuthenticated){\r\n            this.socketUserBlockListen();\r\n            this.props.socket.emit('saveUserId', this.props.user.id);\r\n            const result = await axios.get(`${constants.serverURL}/users`);\r\n            this.setState({users: result.data.users});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                {this.createCards(this.state.users)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(reduxState) {\r\n    return reduxState;\r\n}\r\n\r\nexport default connect(mapStateToProps, { loginExistingToken, logout })(IndexPage);\r\n","const AWS = require('aws-sdk');\r\nconst uuid = require('uuid/v1');\r\nconst {keys} = require('./config/dev');\r\nconst s3 = new AWS.S3({\r\n    signatureVersion: 'v4',\r\n    region: 'ap-south-1',\r\n    accessKeyId: keys.accessKeyId,\r\n    secretAccessKey: keys.secretAccessKey\r\n});\r\n\r\nconst awsFuncs = {\r\n    async getUploadConfig() {\r\n        const key = `images/${uuid()}.jpg`;\r\n        const url = await s3.getSignedUrl('putObject',{\r\n            Bucket: 'intern-images',\r\n            ContentType: 'image/*',\r\n            Key: key\r\n        });\r\n        return {key, url};\r\n    }\r\n};\r\n\r\nexport default awsFuncs;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport axios from 'axios';\r\nimport awsFuncs from '../utilities/awsFunctions';\r\nimport constants from '../utilities/config/constants';\r\nimport { register } from '../actions/index';\r\n\r\nclass Register extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            picture: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.isAuthenticated){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    async postData() {\r\n        const uploadConfig = await awsFuncs.getUploadConfig();\r\n        await axios.put(uploadConfig.url, this.state.picture, {\r\n            headers: {\r\n                'Content-Type': this.state.picture.type\r\n            }\r\n        });\r\n        const picURL = constants.awsBucketURL + uploadConfig.key;\r\n        const obj = {\r\n            picture: picURL,\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n        return await axios.post(`${constants.serverURL}/register`,obj);\r\n    }\r\n\r\n\r\n    async onSubmit(event) {\r\n        event.preventDefault();\r\n        document.querySelector('#alert').innerHTML = `<strong>Please wait while we register you.</strong>`;\r\n        const result = await this.postData();\r\n        if(result.data.auth && result.data.token) {\r\n            await this.props.register(result.data.token);\r\n            this.props.history.push('/');\r\n        }else if(!result.data.auth) {\r\n            document.querySelector('#alert').innerHTML = `<strong>The user already exist in the database.</strong>`;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"row\" style={{display: 'flex', justifyContent: 'center'}}>\r\n            <div className=\"col-md-6\">\r\n                <h1 style={{textAlign: 'center'}}>Register</h1>\r\n                <p id=\"alert\"></p>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            className=\"form-control\"\r\n                            id=\"exampleInputEmail1\"\r\n                            aria-describedby=\"emailHelp\"\r\n                            placeholder=\"Enter email\"\r\n                            value={this.state.email}\r\n                            onChange={(event) => {this.setState({...this.state, email: event.target.value})}}\r\n                            required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            className=\"form-control\"\r\n                            id=\"exampleInputPassword1\"\r\n                            placeholder=\"Password\"\r\n                            pattern=\".{6,}\"\r\n                            title=\"Six or more characters\"\r\n                            value={this.state.password}\r\n                            onChange={(event) => {this.setState({...this.state, password: event.target.value})}}\r\n                            required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputFile1\">Upload Picture</label>\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"picture\"\r\n                            className=\"form-control\"\r\n                            id=\"exampleInputFile1\"\r\n                            placeholder=\"Picture\"\r\n                            onChange={(event) => {this.setState({...this.state, picture: event.target.files[0]})}}\r\n                            accept=\"image/*\"\r\n                            required/>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(reduxState) {\r\n    return reduxState;\r\n}\r\n\r\nexport default connect(mapStateToProps, {register})(Register);\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport constants from '../utilities/config/constants';\r\nimport { login } from '../actions/index';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.isAuthenticated){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    async postData() {\r\n        const obj = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n        return await axios.post(`${constants.serverURL}/login`, obj);\r\n    }\r\n\r\n    async onSubmit(event) {\r\n        event.preventDefault();\r\n        const result = await this.postData();\r\n        if(result.data.auth && result.data.token) {\r\n            await this.props.login(result.data.token);\r\n            this.props.history.push('/');\r\n        }else if(!result.data.auth) {\r\n            document.querySelector('#alert').innerHTML = `<strong>Email or Password incorrect.</strong>`;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"row\" style={{display: 'flex', justifyContent: 'center'}}>\r\n                <div className=\"col-md-6\">\r\n                    <h1 style={{textAlign: 'center'}}>Login</h1>\r\n                    <p id=\"alert\"></p>\r\n                    <form onSubmit={this.onSubmit.bind(this)}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                id=\"exampleInputEmail1\"\r\n                                aria-describedby=\"emailHelp\"\r\n                                placeholder=\"Enter email\"\r\n                                value={this.state.email}\r\n                                onChange={(event) => {this.setState({...this.state, email: event.target.value})}}\r\n                                required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"exampleInputPassword1\"\r\n                                placeholder=\"Password\"\r\n                                value={this.state.password}\r\n                                onChange={(event) => {this.setState({...this.state, password: event.target.value})}}\r\n                                required/>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(reduxState) {\r\n    return reduxState;\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { logout } from '../actions/index';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Logout extends Component{\r\n    componentDidMount() {\r\n        if(this.props.isAuthenticated){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.props.logout();\r\n        return <div></div>;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(reduxState) {\r\n    return reduxState;\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(Logout);\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from './Components/Header';\nimport IndexPage from './Components/IndexPage';\nimport register from './Components/Register';\nimport login from './Components/Login';\nimport logout from './Components/Logout';\nimport socketIOClient from 'socket.io-client';\nimport constants from './utilities/config/constants';\nimport './App.css';\nconst socket = socketIOClient(`${constants.serverURL}`);\n\nfunction App() {\n  return (\n      <BrowserRouter>\n        <Header />\n        <div className=\"container\">\n            <Switch>\n                <Route path='/' exact render={(rest) => <IndexPage {...rest} socket={socket} />} />\n                <Route path='/register' component={register}/>\n                <Route path='/login' component={login}/>\n                <Route path='/logout' component={logout}/>\n                <Redirect to='/' from='*'/>\n            </Switch>\n        </div>\n      </BrowserRouter>\n  );\n}\n\nlet newElement = document.createElement('div');\n\nsocket.on('like',(res) => {\n    newElement.innerHTML = `\n            <div class=\"card w-50 likePicture\">\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\">Liked!!</h5>\n                    <p class=\"card-text\">${res.message}</p>\n                    <button class=\"btn btn-primary closeBox\">Close</button>\n                </div>\n            </div>`;\n    document.body.append(newElement);\n    document.querySelector(\".closeBox\").addEventListener('click', () => {\n        document.querySelector('.likePicture').remove();\n    });\n});\n\nsocket.on('superlike', (res) => {\n    console.log(res.picture);\n    newElement.innerHTML = `\n            <div class=\"card likePicture\" style=\"width: 18rem;\">\n                <img class=\"card-img-top\" src='${res.picture}' alt=\"superliked profile\">\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\">SuperLiked!!</h5>\n                    <p class=\"card-text\">${res.message}</p>\n                    <button class=\"btn btn-primary closeBox\">close</button>\n                </div>\n        </div>`;\n    document.body.append(newElement);\n    document.querySelector(\".closeBox\").addEventListener('click', () => {\n        document.querySelector('.likePicture').remove();\n    });\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst storeWithMiddleware = applyMiddleware(reduxThunk)(createStore);\n\nReactDOM.render(\n    <Provider store={storeWithMiddleware(rootReducer)}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const keys = {\r\n    accessKeyId: process.env.ACCESSKEY,\r\n    secretAccessKey: process.env.SACCESSKEY\r\n};\r\n\r\nconst secret = process.env.JWTSECRET; //should be removed during production\r\n\r\nmodule.exports = {keys, secret};\r\n"],"sourceRoot":""}